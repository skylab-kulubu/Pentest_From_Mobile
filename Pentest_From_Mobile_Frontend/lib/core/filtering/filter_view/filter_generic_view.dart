import 'package:flutter/material.dart';
import 'package:mobile_pentest/core/filtering/filter_interface/ifilter.dart';

import '../../mixins/generic_bottom_sheet/generic_bottom_sheet.dart';

class FilterGenericView<T extends IFilter> extends StatefulWidget {
  const FilterGenericView({required List<T> values, super.key}) : _values = values;

  final List<T> _values;

  @override
  State<FilterGenericView> createState() => _FilterGenericViewState<T>();
}

class _FilterGenericViewState<T> extends State<FilterGenericView> {
  late final List<IFilter> _attacks;
  List<IFilter> filteredAttacks = [];
  final String noFoundText = 'no attacks matched with searched name';
  @override
  void initState() {
    super.initState();
    _attacks = widget._values;
    filteredAttacks = widget._values;
  }

  void filterAttacks(String filter) {
    setState(() {
      filteredAttacks =
          _attacks.where((element) => element.attackName.toLowerCase().startsWith(filter.toLowerCase())).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: TextField(
            style: Theme.of(context).textTheme.headline6?.copyWith(),
            onChanged: filterAttacks,
            keyboardType: TextInputType.text,
            decoration: const InputDecoration(
              border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(12))),
              suffixIcon: Icon(Icons.search_outlined),
            ),
          ),
        ),
        Expanded(
            child: filteredAttacks.isEmpty
                ? Text(noFoundText)
                : ListView.builder(
                    itemCount: filteredAttacks.length,
                    itemBuilder: (BuildContext context, int index) {
                      return ListTile(
                          onTap: () {
                            Navigator.pop(context, filteredAttacks[index]);
                          },
                          title: Text(filteredAttacks[index].attackName, style: Theme.of(context).textTheme.titleLarge),
                          leading: Text((filteredAttacks[index].attackId + 1).toString(),
                              style: Theme.of(context).textTheme.headline4));
                    }))
      ],
    );
  }
}

//* extension must be in same class with his owner or we have to import extensions class otherwise ide would not detect extension
extension FilterviewExtension on FilterGenericView {
  Future<T?> showGenericfilterSheet<T extends IFilter>(
      {required BuildContext context, required List<T> items, required double heightRate}) async {
    final selectedAttack = await SheetGenericMixin.showAttacksBottomSheet<T>(
        context: context, heightRate: heightRate, child: FilterGenericView<T>(values: items));
    return selectedAttack;
  }
}
