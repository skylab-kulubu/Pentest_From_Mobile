import 'package:go_router/go_router.dart';
import 'package:mobile_pentest/core/enum/attack_enum/attack_enums.dart';
import 'package:mobile_pentest/core/enum/navigations_enum/navigation_enums.dart';
import 'package:mobile_pentest/feature/attacks/nmap_attack/model/nmap_model.dart';
import 'package:mobile_pentest/feature/attacks/nmap_attack/view/nmap_attack_view.dart';
import 'package:mobile_pentest/feature/home/view/home_view.dart';
import 'package:mobile_pentest/feature/no_connection/no_connection.dart';

import '../../../feature/attacks/nmap_attack/view/nmap_result_view.dart';
import '../../../feature/settings/view/settings_view.dart';

class NavigationService {
  static NavigationService? _navigationServiceInstance;
  static NavigationService get instance {
    _navigationServiceInstance ??= NavigationService._init();
    return _navigationServiceInstance!;
  }

  NavigationService._init();

  final router = GoRouter(
    routes: <GoRoute>[
      GoRoute(path: NavigationEnums.home.routeName, builder: (context, state) => const HomeView()),
      GoRoute(path: NavigationEnums.settings.routeName, builder: (context, state) => const SettingsView()),
      GoRoute(path: NavigationEnums.noNetwork.routeName, builder: (context, state) => const NoConnectionView()),
      GoRoute(path: Attacks.nmap.attacksRouteName, builder: (context, state) => const NmapAttackView()),
      GoRoute(path: Attacks.nmap.attacksResultRouteName, builder: (context, state) => const NmapResultView())
    ],
    errorBuilder: ((context, state) => const NoConnectionView()),
  );
}
