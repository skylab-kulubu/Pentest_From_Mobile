import 'package:flutter/material.dart';
import 'package:mobile_pentest/core/enum/networkEnum/network_enum.dart';
import 'package:mobile_pentest/core/filtering/filter_models/attack_model.dart';
import 'package:mobile_pentest/core/filtering/filter_view/filter_generic_view.dart';
import 'package:mobile_pentest/feature/attacks/nmap_attack/view/nmap_attack_view.dart';
import 'package:mobile_pentest/feature/no_connection/no_connection.dart';
import 'package:mobile_pentest/feature/settings/view/settings_view.dart';
import 'package:provider/provider.dart';

import '../../../core/enum/attack_enum/attack_enums.dart';
import '../../../product/connectivity_provider/connectivity_provider.dart';

class HomeView extends StatefulWidget {
  const HomeView({super.key});
  @override
  State<HomeView> createState() => _HomeViewState();
}

class _HomeViewState extends State<HomeView> {
  final String title = 'HomeView';
  final double size = 32.0;
  double heightRate = 0.85;

  @override
  Widget build(BuildContext context) {
    return context.watch<ConnectivityProvider>().networkConnectivityEnums == NetworkConnectivityEnums.online
        ? Scaffold(
            floatingActionButton: context.watch<ConnectivityProvider>().isNetworkStatusLoading ||
                    context.watch<ConnectivityProvider>().networkConnectivityEnums == NetworkConnectivityEnums.offline
                ? null
                : FloatingActionButton.extended(
                    onPressed: () async {
                      final selectedAttack =
                          await FilterGenericView<Attack>(values: Attacks.attackList).showGenericfilterSheet(
                        context: context,
                        heightRate: heightRate,
                        items: Attacks.attackList,
                      );
                      if (selectedAttack != null && selectedAttack.attackName == Attacks.nmap.name) {
                        // ignore: use_build_context_synchronously
                        Navigator.push(context, MaterialPageRoute(builder: (context) {
                          return const NmapAttackView();
                        }));
                      }
                    },
                    label: const Text('new attack'),
                    icon: const Icon(Icons.add)),
            appBar: AppBar(
              title: Text(title),
              actions: [
                IconButton(
                    onPressed: () {
                      //context.read<ThemeProvider>().changeTheme();
                      // NavigationService.instance.router.go(NavigationEnums.settings.routeName);
                      Navigator.push(context, MaterialPageRoute(builder: (context) {
                        return const SettingsView();
                      }));
                    },
                    icon: Icon(Icons.settings_outlined, size: size))
              ],
            ),
            body: context.watch<ConnectivityProvider>().isNetworkStatusLoading
                ? const Center(child: CircularProgressIndicator())
                : const Center(child: Text('Past attacks results will be shown here')))
        : const NoConnectionView();
  }

  @override
  void dispose() {
    super.dispose();
    context.watch<ConnectivityProvider>().networkConnectivity.dispose();
  }
}
